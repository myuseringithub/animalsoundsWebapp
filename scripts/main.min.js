/*
 *
 *  Air Horner
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */



(function() {
  'use strict';


  function Animal (sound, image) {
    this.sound = sound;
    this.image = image;
  }
  Animal.randomizeAnimalNoDoubleRepeat = function () {
    var animal = Animal.randomizeAnimal();
    while(animal == Animal.random) {
      animal = Animal.randomizeAnimal();
    }
    return animal;
  }

  Animal.randomizeAnimal = function () {
    var animal = this.animals[Math.floor(Math.random()*this.animals.length)];
    return animal;
  }

  Animal.random = {};

  Animal.animals = [
    new Animal('sounds/dog_bark_springer_spaniel_002.mp3', 'images/animals/dog_512.png'),
    // new Animal('sounds/dog_jack_russell_bark_yap.mp3', 'images/touch/Airhorner_512_v2.png'),
    new Animal('sounds/airhorn.mp3', 'images/animals/blueprint_512.png'),
    new Animal('sounds/cow-moo5.wav', 'images/animals/cow_512.png'),
    new Animal('sounds/Horse-whinny.mp3', 'images/animals/horse_512.png'),
  ];
  // animals.push(new Object());

  Animal.random = Animal.randomizeAnimal();

  // var randomItem = function(items) {
  //   var item = items[Math.floor(Math.random()*items.length)];
  //   return item;
  // }


  var Horn = function() {
    // The Horn Player.

    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    var self = this;
    var source;
    var buffer;

    var loadSound = function(callback) {
      callback = callback || function() {};

      // if(!!buffer == true) {
      //   // If the buffer is already loaded, use that.
      //   callback(buffer);
      //   return;
      // }

      var xhr = new XMLHttpRequest();

      xhr.onload = function() {
        audioCtx.decodeAudioData(xhr.response, function(decodedBuffer) {
          callback(decodedBuffer);
        });
      };

      xhr.open('GET', Animal.random.sound );
      xhr.responseType = 'arraybuffer';
      xhr.send();
    };


    this.start = function(opts) {
      var shouldLoop = opts.loop; // always loop if from an event.

      loadSound(function(tmpBuffer) {
        source = audioCtx.createBufferSource();

        source.connect(audioCtx.destination);

        source.buffer = tmpBuffer;

        source.onended = function () {
          self.stop();
        };

        source.start(0);
        source.loop = shouldLoop;
        source.loopStart = 0.24;
        source.loopEnd = 0.34;

      });
    };

    this.stop = function() {
      if(!!source === true)
        source.loop = false;
      this.onstopped();
    };

    this.onstopped = function() {};

    var init = function() {

      loadSound(function(decodedBuffer) {
        buffer = decodedBuffer;
      });
    };

    init();

  };













  var AirHorn = function(root) {
    // Controls the AirHorn.

    var airhornImage = root.querySelector(".horn");
    var horn = new Horn();

    var start = function (e) {
      if(!!e == true) {
        e.preventDefault();

        if(e.touches && e.touches.length > 1) {
          // Multi touch. OFF.
          return false;
        }
      }

      this.start({loop: false});
    }

    var stop = function(e) {
      if(!!e == true) e.preventDefault();
      this.stop();
    }

    this.start = function(opts) {
      // Play the sound
      airhornImage.classList.add('horning');
      horn.start(opts);

      horn.onstopped = function() {
        airhornImage.classList.remove('horning');
      };


      airhornImage.style.backgroundImage = "url('"+ Animal.random.image +"')";

    };

    this.stop = function() {
      // Stop the sound
      airhornImage.classList.remove('horning');
      horn.stop();
      Animal.random = Animal.randomizeAnimalNoDoubleRepeat();
    };

    airhornImage.addEventListener("mousedown", start.bind(this));
    airhornImage.addEventListener("touchstart", start.bind(this));

    document.documentElement.addEventListener("mouseup", stop.bind(this));
    document.documentElement.addEventListener("touchend", stop.bind(this));

  };





  window.addEventListener('load', function() {
    var airhornEl = document.getElementById('airhorn');
    var installEl = document.getElementById('installer');
    var airhorn = new AirHorn(airhornEl);
    var installer = new Installer(installEl);

    if(location.hash == "#instant") {
      airhorn.start({ loop: false });
    }
  });
})();














var Installer = function(root) {

  var tooltip = root.querySelector('.tooltip');

  var install = function(e) {
    e.preventDefault();
    window.install.prompt()
      .then(function() {
        // Success.
        root.classList.remove('available');
      })
      .catch(function(installError) {
        // Boo. update the UI.
      });
  };

  var init = function() {
    window.install.canPrompt()
      .then(function() {
          root.classList.add('available');
      });
  };

  root.addEventListener('click', install.bind(this));
  root.addEventListener('touchend', install.bind(this));

  init();
};



(function() {

  var deferredInstall;
  var promptTriggered = false;

  var handleInstall = function(userChoice) {
    return new Promise(function(resolve, reject) {
      // Abstracts the user choice
      userChoice.then(function(choice) {
        resolve(choice);
      }).catch(function() {
        reject();
      });
    });
  };

  var canPromptPromiseResolve;
  var canPromptPromise = new Promise(function(resolve, reject) {
      canPromptPromiseResolve = resolve;
  });


  window.addEventListener("beforeinstallprompt",function(e) {

    promptTriggered = true;

    // Stop it doing what it needs to do;
    e.preventDefault();
    deferredInstall = e;

    canPromptPromiseResolve();

    return false;
  });

  var install = {};

  Object.defineProperty(install, "isAvailable", { get: function() { return promptTriggered; } });

  install.canPrompt = function() {
    return canPromptPromise;
  };

  install.prompt = function () {
    return new Promise(function(resolve, reject){
      if(promptTriggered === false) {
        // There can be a whole host or reasons, we should determine them
        reject("User Agent decided not to prompt");
      };

      deferredInstall.prompt().then(function() {
        return handleInstall(deferredInstall.userChoice);
      }).then(function() {
        resolve();
      }).catch(function(reason) {
        reject(reason);
      });
    });
  };

  window.install = install;
})();
